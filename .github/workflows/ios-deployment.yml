name: ci
on:
  workflow_dispatch: 
  #push:
  #  branches:
  #    - dev
  #    - test
  #pull_request:
  #  branches:
  #    - dev
  #    - test
jobs:
  flutter_test:
    name: Run flutter test and analyze
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      #- name: cache pub dependencies
      #  uses: actions/cache@v4
      #  with: 
      #    path:  ~/.pub-cache
      #    key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.yaml') }}

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin' # Use 'temurin' for OpenJDK 17

      - name: Set up Flutter
        uses: subosito/flutter-action@v2 # will allow you to run flutter commands
        with:
          flutter-version: '3.7.0'
          channel: 'stable' # Use 'stable' channel for production-ready Flutter SDK

      - name: Install dependencies
        run: flutter pub get
      - name: Analyze code
        run: flutter analyze  

      - name: Run tests
        run: flutter test 

      - name: Decode keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks

      - name: create key.properties
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties:
          echo "storeFile=keystore.jks" >> android/key.properties
        
  build_ios:
    name: Build flutter IOS
    needs: [flutter_test]

    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin' # Use 'temurin' for OpenJDK 17

      - name: Set up Flutter
        uses: subosito/flutter-action@v2 # will allow you to run flutter commands
        with:
          channel: 'stable' # Use 'stable' channel for production-ready Flutter SDK
      - run: |
          flutter pub get
          flutter clean 
          flutter build ios --no-codesign

      - name: Create tar.gz of iOS build
        run: |
          mkdir -p build
          tar -czf build/ios_build.tar.gz build/ios/iphoneos/*.app
      
      - name: upload IOS build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/ios_build.tar.gz

       # Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

        # Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV
          fi

        # Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'false'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "new version is:
          echo $new_version
          echo "VERSION=$new_version" >> $GITHUB_ENV
        
        # Create Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/ios_build.tar.gz"
          tag: v${{ env.VERSION }}
          token: ${{ secrets.GITHUB_TOKEN }}
